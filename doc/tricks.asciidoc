[[tricks]]

== Tricks

[[object-representation]]
=== Object Representation

A rather useful representation of objects is to have some additional
metadata on your object for use by the GraphQL system in addition to
the base data fields which the client can request.

.Maps

If your object representation is a `map()`, you can add special fields
into the map which is used by the GraphQL system. You can add those
fields as you load the object from the backend database, in order to
make it easier to work with later. In Erlang systems, due to
immutability, a pointer to some static data is essentially free, as
long as terms share the same base value. So don't be afraid to add
some metadata on your object.

A common convention is to use a special atom such as
`'$tag'`.footnote:[In Erlang/OTP 20.0 and onward, atoms can be
arbitrary Unicode data, so you can pick a special symbol to mark
special atoms] You can then add data under that key in the map which
is useful to the GraphQL backend only.

In addition, our convention is that fields which _must_ be derived
begin with an underscore (e.g., `_images`). This makes it clear to the
reader that the data is not isosmurfically mappable into the Graph but
requires some kind of transformation.

.Wrappers

Rather than represent an object as a record such as `#starship{}` you
represent the data as a wrapped term: `{#starship{} = Ship, MetaData}`
and then you write your execution function such that it operates on
the wrapped term rather than the raw `Ship`. This has the advantage of
keeping the data separate from the raw plain data object. The
sacrifice, though, is you have to do more work in your object
resolution code.

[[non-isomorphism]]
=== Avoid Isomorphic representations

A common want when designing API systems is to avoid the need for
continual translation of backend data to the GraphQL schema. A
common solution to this problem is to make the database schema 1-1
with the GraphQL schema, often called an isomorphic
representation.footnote:[Isomorphic stems from ancient greek and means
"`equal shape`"] However, our experience is that such a 1-1 mapping is
detrimental to the development of the system. It is common the GraphQL
schema and the underlying data evolve at different paces and that new
data sources are added as you go along.

Thus, a piece of advice is to know when to break from the 1-1 mapping
and build your own translation layer in order to handle the gradual
evolution of the database schema and the GraphQL contract. In general,
you shouldn't be afraid of breaking the isomorphic representation if
that turns out to help you define your system in a better way. On the
flip side, inventing new terminology and names shouldn't in general be
done for the sake of doing so. The advantage of having an isomorphism
between the contract and the database is that you don't have to
explain to people what the mapping means.

* Look out for the situation where a simple change in the contract
  starts an avalanche of changes all throughout your stack. This tends
  to mean you have built a system where each layer transforms the
  data. Keep transformers down to as few layers as possible and let
  the end-points in the data passing handle the transformations.
* Large systems constantly change. Have some place in the code where
  you can insert a temporary stub or plug while you change other parts
  of the system. It is not generally possible to switch a system in
  one go as soon as it becomes large. By having a stub/plug you can
  gradually change the large system rather than having to change
  everything at once.

[[middleware-stacks]]
=== Middleware stacks

In many larger HTTP systems, it is common to have a "`middleware
stack`". In a middleware stack, there is a section of code which is
run for every request to the system. It is often used for a number of
different cases:

* Authentication of clients if they provide authentication tokens.
* Proxy setup by coercing the underlying IP addresses from proxy-added
  headers.
* IP Blacklist handling
* Request limitation systems
* Metric gathering for requests
* CORS--Cross-Origin Resource Sharing

In a GraphQL, these concerns tend to split into two groups:

Contextual middleware:: This is run before the GraphQL execution
    begins.
Mutation middleware:: This is run as part of a mutation.

In {project} we decided to create a system in which middleware
handling is put into the hands of the programmer outside of the
GraphQL system. There is no way to "`inject`" middlewares in the
system. Rather we handle the stack by providing functionality which
allows the programmer to write their own equivalent.

The reason is we recognize how these stacks tend to be application
specific and also tend to be changing a lot. So by keeping them
outside the {project} itself we avoid having to cater for them all the
time.

==== The Context

Many parts of the execution depends on the transport in which we run.
An HTTP transport will have different handling than a raw TCP socket
on which we exchange protocol buffers, a Kafka topic, or a RabbitMQ
broker for instance.

Things such as CORS and authentication is usually handled on the
transport. You then setup of extra parameters for the context and
start GraphQL execution with that added context. We tend to use a
field `#{ auth_context => Auth } = Ctx` inside the context for
authentication. Now, when your GraphQL query executes, it has access
to authentication data and can act accordingly.

==== The Mutations

For mutations, we like to write the execution function such that it
handles all fields at the top level. This allows you to use typical
Erlang function calls to build up a stack. At the very bottom of the
stack you dispatch on the `Field` in `execute/4` <<object-resolution>>
to handle each mutation. The function calls allows you to manipulate
the `Ctx` and `Args` with further information as you process the
mutation.

---

We've found these two tricks to be adequate for all of our handling.
Note that the context is immutable in a query. We don't in general
allow the context to be manipulated by the queries. If you need to
"`pass down`" extra data, embed it into the *Obj* which is returned
such that when the cursor moves down to the object, you can inspect it
for data.

Say you want to protect certain fields on an object based on auth.
When you load the object, you can mask out fields the auth-context
doesn't have access to by replacing them with an atom such as
`access_denied`. Then you write a function:

[source,erlang]
----
access(Obj, Field) ->
    case maps:get(Obj, Field, not_found) of
      not_found -> {ok, null}; % Or appropriate answer
      access_denied -> {error, access_denied}; % or perhaps {ok, null}
      Val -> {ok, Val}
    end.
----

More advanced solutions are possible and are covered in the sections
of <<authentication>> and <<authorization>>.

=== Data Loader

TBD

=== Fragments

TBD

[[lazy-evaluation]]
=== Lazy Evaluation

If you have data where computation is circular, you will have to make
sure you don't build an infinite loop in the data. This system has
support for lazy evaluation, but you will have to write it yourself
and handle it in your side. GraphQL provides the facilities, but not
the solution here.

When you return an object to GraphQL, you can return any data. Further
recursion into the query will then call execution functions on the
underlying data. If you return an object such as

[source, erlang]
----
{ok, #{ <<"fieldName">> => {'$lazy', fun() -> Expr end}, ...}}
----

you delay the computation of `Expr` because it is wrapped in a
function. Now, when you actually hit the field, in another execute
function, you can handle the lazy node by evaluating it when the field
is hit:

[source, erlang]
----
execute(Ctx, #{ <<"fieldName">> := Field }, <<"fieldName">>, Args) ->
    {'$lazy', Thunk} = Field,
    Thunk();
    ...
----

This ensures you only force/unroll the computation if the field is
actually invoked, and you obtain lazy evaluation over the Graph.

.Uses

The method is useful in the case where your data is naturally cyclic,
but where any query has a limited depth. By delaying computation, you
will only force the computation the necessary amount of times, rather
than eagerly entering an infinite loop.

Another common use case is when some parts of your computation is
known when you build the initial object, but the computation of the
content is expensive. By delaying the computation itself inside a
thunk, you only compute that part if it turns out to be necessary.

